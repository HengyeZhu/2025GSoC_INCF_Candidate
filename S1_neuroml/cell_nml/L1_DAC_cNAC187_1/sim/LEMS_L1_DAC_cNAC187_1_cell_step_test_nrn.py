'''
Neuron simulator export for:

Components:
    null (Type: notes)
    K_Tst (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    SKv3_1 (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    Nap_Et2 (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    NaTs2_t (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    Ih (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    pas (Type: ionChannelPassive:  conductance=1.0E-11 (SI conductance))
    Im (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    NaTa_t (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    Ca_LVAst (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    SK_E2 (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    K_Pst (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    CaDynamics_E2__bNAC_1_axonal (Type: concentrationModelHayEtAl:  gamma=0.001739 (dimensionless) minCai=1.0E-4 (SI concentration) decay=0.468069681 (SI time) depth=1.0E-7 (SI length) Faraday=96485.3 (SI charge_per_mole) AREA_SCALE=1.0 (SI area) LENGTH_SCALE=1.0 (SI length))
    CaDynamics_E2__bNAC_1_somatic (Type: concentrationModelHayEtAl:  gamma=5.0E-4 (dimensionless) minCai=1.0E-4 (SI concentration) decay=0.645079741 (SI time) depth=1.0E-7 (SI length) Faraday=96485.3 (SI charge_per_mole) AREA_SCALE=1.0 (SI area) LENGTH_SCALE=1.0 (SI length))
    CaDynamics_E2__bNAC_4_axonal (Type: concentrationModelHayEtAl:  gamma=0.001739 (dimensionless) minCai=1.0E-4 (SI concentration) decay=0.468069681 (SI time) depth=1.0E-7 (SI length) Faraday=96485.3 (SI charge_per_mole) AREA_SCALE=1.0 (SI area) LENGTH_SCALE=1.0 (SI length))
    CaDynamics_E2__bNAC_4_somatic (Type: concentrationModelHayEtAl:  gamma=5.0E-4 (dimensionless) minCai=1.0E-4 (SI concentration) decay=0.645079741 (SI time) depth=1.0E-7 (SI length) Faraday=96485.3 (SI charge_per_mole) AREA_SCALE=1.0 (SI area) LENGTH_SCALE=1.0 (SI length))
    CaDynamics_E2__cNAC_1_axonal (Type: concentrationModelHayEtAl:  gamma=0.010353 (dimensionless) minCai=1.0E-4 (SI concentration) decay=0.06427799000000001 (SI time) depth=1.0E-7 (SI length) Faraday=96485.3 (SI charge_per_mole) AREA_SCALE=1.0 (SI area) LENGTH_SCALE=1.0 (SI length))
    CaDynamics_E2__cNAC_1_somatic (Type: concentrationModelHayEtAl:  gamma=5.11E-4 (dimensionless) minCai=1.0E-4 (SI concentration) decay=0.731707637 (SI time) depth=1.0E-7 (SI length) Faraday=96485.3 (SI charge_per_mole) AREA_SCALE=1.0 (SI area) LENGTH_SCALE=1.0 (SI length))
    Ca (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    L1_DAC_cNAC187_1_cell_0_0 (Type: cell)
    pg (Type: pulseGenerator:  delay=0.1 (SI time) duration=2.5 (SI time) amplitude=2.0E-11 (SI current))
    L1_DAC_cNAC187_1_cell_net (Type: network)
    L1_DAC_cNAC187_1_cell_step_test (Type: Simulation:  length=3.0 (SI time) step=1.0E-5 (SI time))


    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.11.0
         org.neuroml.model   v1.11.0
         jLEMS               v0.12.0

'''

import neuron

import time
import datetime
import sys

import hashlib
h = neuron.h
h.load_file("nrngui.hoc")

h("objref p")
h("p = new PythonObject()")

class NeuronSimulation():

    def __init__(self, tstop, dt=None, seed=12345, abs_tol=None, rel_tol=None):

        print("\n    Starting simulation in NEURON of %sms generated from NeuroML2 model...\n"%tstop)

        self.setup_start = time.time()
        self.seed = seed
        self.abs_tol = abs_tol
        self.rel_tol = rel_tol
        self.randoms = []
        self.next_global_id = 0  # Used in Random123 classes for elements using random(), etc. 

        self.next_spiking_input_id = 0  # Used in Random123 classes for elements using random(), etc. 

        '''
        Adding simulation Component(id=L1_DAC_cNAC187_1_cell_step_test type=Simulation) of network/component: L1_DAC_cNAC187_1_cell_net (Type: network)
        
        '''
        # ######################   Population: L1_DAC_cNAC187_1_cellpop
        print("Population L1_DAC_cNAC187_1_cellpop contains 1 instance(s) of component: L1_DAC_cNAC187_1_cell_0_0 of type: cell")

        print("Setting the default initial concentrations for ca (used in L1_DAC_cNAC187_1_cell_0_0) to 5.0E-5 mM (internal), 2.0 mM (external)")
        h("cai0_ca_ion = 5.0E-5")
        h("cao0_ca_ion = 2.0")

        print("Setting the default initial concentrations for ca (used in L1_DAC_cNAC187_1_cell_0_0) to 5.0E-5 mM (internal), 2.0 mM (external)")
        h("cai0_ca_ion = 5.0E-5")
        h("cao0_ca_ion = 2.0")

        h.load_file("L1_DAC_cNAC187_1_cell_0_0.hoc")
        a_L1_DAC_cNAC187_1_cellpop = []
        h("{ n_L1_DAC_cNAC187_1_cellpop = 1 }")
        h("objectvar a_L1_DAC_cNAC187_1_cellpop[n_L1_DAC_cNAC187_1_cellpop]")
        for i in range(int(h.n_L1_DAC_cNAC187_1_cellpop)):
            h("a_L1_DAC_cNAC187_1_cellpop[%i] = new L1_DAC_cNAC187_1_cell_0_0()"%i)
            h("access a_L1_DAC_cNAC187_1_cellpop[%i].soma"%i)

            self.next_global_id+=1


        h("proc initialiseV_L1_DAC_cNAC187_1_cellpop() { for i = 0, n_L1_DAC_cNAC187_1_cellpop-1 { a_L1_DAC_cNAC187_1_cellpop[i].set_initial_v() } }")
        h("objref fih_L1_DAC_cNAC187_1_cellpop")
        h('{fih_L1_DAC_cNAC187_1_cellpop = new FInitializeHandler(0, "initialiseV_L1_DAC_cNAC187_1_cellpop()")}')

        h("proc initialiseIons_L1_DAC_cNAC187_1_cellpop() { for i = 0, n_L1_DAC_cNAC187_1_cellpop-1 { a_L1_DAC_cNAC187_1_cellpop[i].set_initial_ion_properties() } }")
        h("objref fih_ion_L1_DAC_cNAC187_1_cellpop")
        h('{fih_ion_L1_DAC_cNAC187_1_cellpop = new FInitializeHandler(1, "initialiseIons_L1_DAC_cNAC187_1_cellpop()")}')

        print("Processing 1 input lists")

        # ######################   Input List: input_list
        # Adding single input: Component(id=0 type=input)
        h("objref input_list_0")
        h("a_L1_DAC_cNAC187_1_cellpop[0].soma { input_list_0 = new pg(0.025000054) } ")

        print("Finished processing 1 input lists")

        trec = h.Vector()
        trec.record(h._ref_t)

        h.tstop = tstop

        if self.abs_tol is not None and self.rel_tol is not None:
            cvode = h.CVode()
            cvode.active(1)
            cvode.atol(self.abs_tol)
            cvode.rtol(self.rel_tol)
        else:
            h.dt = dt
            h.steps_per_ms = 1/h.dt

        # ######################   Display: self.display_DispPop__L1_DAC_cNAC187_1_cellpop
        self.display_DispPop__L1_DAC_cNAC187_1_cellpop = h.Graph(0)
        self.display_DispPop__L1_DAC_cNAC187_1_cellpop.size(0,h.tstop,-80.0,50.0)
        self.display_DispPop__L1_DAC_cNAC187_1_cellpop.view(0, -80.0, h.tstop, 130.0, 80, 330, 330, 250)
        h.graphList[0].append(self.display_DispPop__L1_DAC_cNAC187_1_cellpop)
        # Line, plotting: L1_DAC_cNAC187_1_cellpop[0]/v
        self.display_DispPop__L1_DAC_cNAC187_1_cellpop.addexpr("a_L1_DAC_cNAC187_1_cellpop[0].soma.v(0.025000054)", "a_L1_DAC_cNAC187_1_cellpop[0].soma.v(0.025000054)", 1, 1, 0.8, 0.9, 2)



        # ######################   File to save: L1_DAC_cNAC187_1_cell_step_test.L1_DAC_cNAC187_1_cellpop.v.dat (Volts_file__L1_DAC_cNAC187_1_cellpop)
        # Column: L1_DAC_cNAC187_1_cellpop[0]/v
        h(' objectvar v_v_L1_DAC_cNAC187_1_cellpop_0__v_Volts_file__L1_DAC_cNAC187_1_cellpop ')
        h(' { v_v_L1_DAC_cNAC187_1_cellpop_0__v_Volts_file__L1_DAC_cNAC187_1_cellpop = new Vector() } ')
        h(' { v_v_L1_DAC_cNAC187_1_cellpop_0__v_Volts_file__L1_DAC_cNAC187_1_cellpop.record(&a_L1_DAC_cNAC187_1_cellpop[0].soma.v(0.025000054)) } ')
        if self.abs_tol is None or self.rel_tol is None:

            h.v_v_L1_DAC_cNAC187_1_cellpop_0__v_Volts_file__L1_DAC_cNAC187_1_cellpop.resize((h.tstop * h.steps_per_ms) + 1)

        # ######################   File to save: L1_DAC_cNAC187_1_cell_step_test.L1_DAC_cNAC187_1_cellpop.spikes (Spikes_file__L1_DAC_cNAC187_1_cellpop)
        h(' objectvar spiketimes_Spikes_file__L1_DAC_cNAC187_1_cellpop, t_spiketimes_Spikes_file__L1_DAC_cNAC187_1_cellpop ')
        h(' { spiketimes_Spikes_file__L1_DAC_cNAC187_1_cellpop = new Vector() } ')
        h(' { t_spiketimes_Spikes_file__L1_DAC_cNAC187_1_cellpop = new Vector() } ')
        h(' objref netConnSpike_Spikes_file__L1_DAC_cNAC187_1_cellpop, nil ')
        # Column: L1_DAC_cNAC187_1_cellpop[0] (0) a_L1_DAC_cNAC187_1_cellpop[0].soma
        h(' a_L1_DAC_cNAC187_1_cellpop[0].soma { netConnSpike_Spikes_file__L1_DAC_cNAC187_1_cellpop = new NetCon(&v(0.5), nil, 10.0, 0, 1) } ')
        h(' { netConnSpike_Spikes_file__L1_DAC_cNAC187_1_cellpop.record(t_spiketimes_Spikes_file__L1_DAC_cNAC187_1_cellpop, spiketimes_Spikes_file__L1_DAC_cNAC187_1_cellpop, 0) } ')

        # ######################   File to save: time.dat (time)
        # Column: time
        h(' objectvar v_time ')
        h(' { v_time = new Vector() } ')
        h(' { v_time.record(&t) } ')
        if self.abs_tol is None or self.rel_tol is None:

            h.v_time.resize((h.tstop * h.steps_per_ms) + 1)

        self.initialized = False

        self.sim_end = -1 # will be overwritten

        setup_end = time.time()
        self.setup_time = setup_end - self.setup_start
        print("Setting up the network to simulate took %f seconds"%(self.setup_time))

        h.nrncontrolmenu()


    def run(self):

        self.initialized = True
        sim_start = time.time()
        if self.abs_tol is not None and self.rel_tol is not None:
            print("Running a simulation of %sms (cvode abs_tol = %sms, rel_tol = %sms; seed=%s)" % (h.tstop, self.abs_tol, self.rel_tol, self.seed))
        else:
            print("Running a simulation of %sms (dt = %sms; seed=%s)" % (h.tstop, h.dt, self.seed))

        try:
            h.run()
        except Exception as e:
            print("Exception running NEURON: %s" % (e))
            return


        self.sim_end = time.time()
        self.sim_time = self.sim_end - sim_start
        print("Finished NEURON simulation in %f seconds (%f mins)..."%(self.sim_time, self.sim_time/60.0))

        try:
            self.save_results()
        except Exception as e:
            print("Exception saving results of NEURON simulation: %s" % (e))
            return


    def advance(self):

        if not self.initialized:
            h.finitialize()
            self.initialized = True

        h.fadvance()


    ###############################################################################
    # Hash function to use in generation of random value
    # This is copied from NetPyNE: https://github.com/Neurosim-lab/netpyne/blob/master/netpyne/simFuncs.py
    ###############################################################################
    def _id32 (self,obj): 
        return int(hashlib.md5(obj.encode('utf-8')).hexdigest()[0:8],16)  # convert 8 first chars of md5 hash in base 16 to int


    ###############################################################################
    # Initialize the stim randomizer
    # This is copied from NetPyNE: https://github.com/Neurosim-lab/netpyne/blob/master/netpyne/simFuncs.py
    ###############################################################################
    def _init_stim_randomizer(self,rand, stimType, gid, seed): 
        #print("INIT STIM  %s; %s; %s; %s"%(rand, stimType, gid, seed))
        rand.Random123(self._id32(stimType), gid, seed)


    def save_results(self):

        print("Saving results at t=%s..."%h.t)

        if self.sim_end < 0: self.sim_end = time.time()

        self.display_DispPop__L1_DAC_cNAC187_1_cellpop.exec_menu("View = plot")

        # ######################   File to save: time.dat (time). Note, saving in SI units
        py_v_time = [ t/1000 for t in h.v_time.to_python() ]  # Convert to Python list for speed...

        f_time_f2 = open('time.dat', 'w')
        num_points = len(py_v_time)  # Simulation may have been stopped before tstop...

        for i in range(num_points):
            f_time_f2.write('%f'% py_v_time[i])  # Save in SI units...
        f_time_f2.close()
        print("Saved data to: time.dat")

        # ######################   File to save: L1_DAC_cNAC187_1_cell_step_test.L1_DAC_cNAC187_1_cellpop.v.dat (Volts_file__L1_DAC_cNAC187_1_cellpop). Note, saving in SI units
        py_v_v_L1_DAC_cNAC187_1_cellpop_0__v_Volts_file__L1_DAC_cNAC187_1_cellpop = [ float(x  / 1000.0) for x in h.v_v_L1_DAC_cNAC187_1_cellpop_0__v_Volts_file__L1_DAC_cNAC187_1_cellpop.to_python() ]  # Convert to Python list for speed, variable has dim: voltage

        f_Volts_file__L1_DAC_cNAC187_1_cellpop_f2 = open('L1_DAC_cNAC187_1_cell_step_test.L1_DAC_cNAC187_1_cellpop.v.dat', 'w')
        num_points = len(py_v_time)  # Simulation may have been stopped before tstop...

        for i in range(num_points):
            f_Volts_file__L1_DAC_cNAC187_1_cellpop_f2.write('%e\t%e\t\n' % (py_v_time[i], py_v_v_L1_DAC_cNAC187_1_cellpop_0__v_Volts_file__L1_DAC_cNAC187_1_cellpop[i], ))
        f_Volts_file__L1_DAC_cNAC187_1_cellpop_f2.close()
        print("Saved data to: L1_DAC_cNAC187_1_cell_step_test.L1_DAC_cNAC187_1_cellpop.v.dat")

        # ######################   File to save: L1_DAC_cNAC187_1_cell_step_test.L1_DAC_cNAC187_1_cellpop.spikes (Spikes_file__L1_DAC_cNAC187_1_cellpop). Note, saving in SI units

        f_Spikes_file__L1_DAC_cNAC187_1_cellpop_f2 = open('L1_DAC_cNAC187_1_cell_step_test.L1_DAC_cNAC187_1_cellpop.spikes', 'w')
        h(' objref netConnSpike_Spikes_file__L1_DAC_cNAC187_1_cellpop ')
        spike_ids = h.spiketimes_Spikes_file__L1_DAC_cNAC187_1_cellpop.to_python()  
        spike_times = h.t_spiketimes_Spikes_file__L1_DAC_cNAC187_1_cellpop.to_python()
        for i, id in enumerate(spike_ids):
            # Saving in format: ID_TIME
            f_Spikes_file__L1_DAC_cNAC187_1_cellpop_f2.write("%i\t%s\n"%(id,spike_times[i]/1000.0))
        f_Spikes_file__L1_DAC_cNAC187_1_cellpop_f2.close()
        print("Saved data to: L1_DAC_cNAC187_1_cell_step_test.L1_DAC_cNAC187_1_cellpop.spikes")

        save_end = time.time()
        save_time = save_end - self.sim_end
        print("Finished saving results in %f seconds"%(save_time))

        print("Done")

if __name__ == '__main__':

    ns = NeuronSimulation(tstop=3000.0, dt=0.01, seed=12345, abs_tol=None, rel_tol=None)

    ns.run()

